//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""e98642c3-e492-4dc8-aadb-6d59461d6fa0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95aebaa8-36e8-4711-a615-72f4b5c33780"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left Analog Stick"",
                    ""id"": ""2d383199-351b-4c38-adfe-34be94d4175b"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b58fdb4-fa49-4979-92e8-17697cabb9a4"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ee7d53ad-b4e6-4139-bd35-4b34fadc5a7c"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""55cb024d-36a1-49e0-b527-68a2c2cff3a4"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""837341ed-8e14-417c-b2ef-e69a96573dcf"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player Camera"",
            ""id"": ""d4909b31-f38c-4aee-b911-2fcec8669e63"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""518c7e3e-f854-466c-9437-10d8def54479"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""RightAnalogStick"",
                    ""id"": ""52317654-b950-4d3d-bef1-c12c8dc252cc"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""50797957-766d-49dd-ad10-b74bf8b5792d"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""26923e69-52d7-4e6f-bcbe-40f1e18a3ecf"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7f5203dc-1280-499a-9b8f-96bf93187c0c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""044678d8-e934-4e84-9b5f-8401d60910c9"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player Actions"",
            ""id"": ""0bfdb8fc-992b-4538-846e-2f54c6003270"",
            ""actions"": [
                {
                    ""name"": ""QuickBoost"",
                    ""type"": ""Button"",
                    ""id"": ""b3518089-0edc-4b45-982e-9b3f80583ffa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""256be6ce-435c-438b-bd5e-960d3c56396c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flight"",
                    ""type"": ""Button"",
                    ""id"": ""537d826b-20d3-4a9c-884d-ff23e0551e1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlightPrimer"",
                    ""type"": ""Button"",
                    ""id"": ""f4b3bc44-d766-4730-8dc6-25220af7e43c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireRightWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""34acc030-f4b9-4776-8372-ba021c3280d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireLeftWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""55932d75-08c5-4a37-9c01-a3d5bf8d3a2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLockOn"",
                    ""type"": ""Button"",
                    ""id"": ""abc30f95-7631-4777-9327-29532e0fe5f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""585b28bb-67a5-4e78-8dfa-d8bf885abf20"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuickBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b62cbef1-988b-4a1c-bc09-997d0a82f9c8"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65682084-d29f-42d6-963d-ea69e73dbddf"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Hold(duration=0.21,pressPoint=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c68c9a22-7113-476c-a216-3d585db4b50a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Tap(pressPoint=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlightPrimer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57f837e9-09e5-404c-a005-539d6e37b443"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireRightWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f507fc79-fd59-4c96-8b02-32fafd2a69f9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLeftWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd4f6914-4ebe-4509-ba95-968212695927"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // Player Camera
        m_PlayerCamera = asset.FindActionMap("Player Camera", throwIfNotFound: true);
        m_PlayerCamera_Movement = m_PlayerCamera.FindAction("Movement", throwIfNotFound: true);
        // Player Actions
        m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
        m_PlayerActions_QuickBoost = m_PlayerActions.FindAction("QuickBoost", throwIfNotFound: true);
        m_PlayerActions_Boost = m_PlayerActions.FindAction("Boost", throwIfNotFound: true);
        m_PlayerActions_Flight = m_PlayerActions.FindAction("Flight", throwIfNotFound: true);
        m_PlayerActions_FlightPrimer = m_PlayerActions.FindAction("FlightPrimer", throwIfNotFound: true);
        m_PlayerActions_FireRightWeapon = m_PlayerActions.FindAction("FireRightWeapon", throwIfNotFound: true);
        m_PlayerActions_FireLeftWeapon = m_PlayerActions.FindAction("FireLeftWeapon", throwIfNotFound: true);
        m_PlayerActions_SwitchLockOn = m_PlayerActions.FindAction("SwitchLockOn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Camera
    private readonly InputActionMap m_PlayerCamera;
    private IPlayerCameraActions m_PlayerCameraActionsCallbackInterface;
    private readonly InputAction m_PlayerCamera_Movement;
    public struct PlayerCameraActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerCameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerCamera_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCameraActions instance)
        {
            if (m_Wrapper.m_PlayerCameraActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerCameraActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);

    // Player Actions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_QuickBoost;
    private readonly InputAction m_PlayerActions_Boost;
    private readonly InputAction m_PlayerActions_Flight;
    private readonly InputAction m_PlayerActions_FlightPrimer;
    private readonly InputAction m_PlayerActions_FireRightWeapon;
    private readonly InputAction m_PlayerActions_FireLeftWeapon;
    private readonly InputAction m_PlayerActions_SwitchLockOn;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @QuickBoost => m_Wrapper.m_PlayerActions_QuickBoost;
        public InputAction @Boost => m_Wrapper.m_PlayerActions_Boost;
        public InputAction @Flight => m_Wrapper.m_PlayerActions_Flight;
        public InputAction @FlightPrimer => m_Wrapper.m_PlayerActions_FlightPrimer;
        public InputAction @FireRightWeapon => m_Wrapper.m_PlayerActions_FireRightWeapon;
        public InputAction @FireLeftWeapon => m_Wrapper.m_PlayerActions_FireLeftWeapon;
        public InputAction @SwitchLockOn => m_Wrapper.m_PlayerActions_SwitchLockOn;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @QuickBoost.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQuickBoost;
                @QuickBoost.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQuickBoost;
                @QuickBoost.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnQuickBoost;
                @Boost.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnBoost;
                @Flight.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlight;
                @Flight.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlight;
                @Flight.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlight;
                @FlightPrimer.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlightPrimer;
                @FlightPrimer.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlightPrimer;
                @FlightPrimer.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFlightPrimer;
                @FireRightWeapon.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireRightWeapon;
                @FireRightWeapon.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireRightWeapon;
                @FireRightWeapon.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireRightWeapon;
                @FireLeftWeapon.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireLeftWeapon;
                @FireLeftWeapon.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireLeftWeapon;
                @FireLeftWeapon.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnFireLeftWeapon;
                @SwitchLockOn.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSwitchLockOn;
                @SwitchLockOn.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSwitchLockOn;
                @SwitchLockOn.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSwitchLockOn;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @QuickBoost.started += instance.OnQuickBoost;
                @QuickBoost.performed += instance.OnQuickBoost;
                @QuickBoost.canceled += instance.OnQuickBoost;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @Flight.started += instance.OnFlight;
                @Flight.performed += instance.OnFlight;
                @Flight.canceled += instance.OnFlight;
                @FlightPrimer.started += instance.OnFlightPrimer;
                @FlightPrimer.performed += instance.OnFlightPrimer;
                @FlightPrimer.canceled += instance.OnFlightPrimer;
                @FireRightWeapon.started += instance.OnFireRightWeapon;
                @FireRightWeapon.performed += instance.OnFireRightWeapon;
                @FireRightWeapon.canceled += instance.OnFireRightWeapon;
                @FireLeftWeapon.started += instance.OnFireLeftWeapon;
                @FireLeftWeapon.performed += instance.OnFireLeftWeapon;
                @FireLeftWeapon.canceled += instance.OnFireLeftWeapon;
                @SwitchLockOn.started += instance.OnSwitchLockOn;
                @SwitchLockOn.performed += instance.OnSwitchLockOn;
                @SwitchLockOn.canceled += instance.OnSwitchLockOn;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerCameraActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnQuickBoost(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnFlight(InputAction.CallbackContext context);
        void OnFlightPrimer(InputAction.CallbackContext context);
        void OnFireRightWeapon(InputAction.CallbackContext context);
        void OnFireLeftWeapon(InputAction.CallbackContext context);
        void OnSwitchLockOn(InputAction.CallbackContext context);
    }
}
